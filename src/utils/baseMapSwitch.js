/**
 * 底图切换
 * 地图位置关系判断
 * 1 xmmapConst.outline  厦门边界数据采集
 * 2 CheckMapPosition 判断地图与窗体的位置关系
 * 3 IsPointInPolygon 判断点是否多边形内
 * @type {{}}
 */
let outline = [
  {"lat": 118.11326183887499, "lng": 24.389700656244145}
  , {"lat": 118.1026188335039, "lng": 24.40051532299219}
  , {"lat": 118.09043087574022, "lng": 24.406351809808598}
  , {"lat": 118.08013119312304, "lng": 24.411158328363285}
  , {"lat": 118.0696598491289, "lng": 24.417338137933598}
  , {"lat": 118.06039013477343, "lng": 24.422659640619145}
  , {"lat": 118.04562725635546, "lng": 24.423861270257817}
  , {"lat": 118.02966274829882, "lng": 24.424719577142582}
  , {"lat": 118.00769009204882, "lng": 24.42677951366602}
  , {"lat": 117.98949398609179, "lng": 24.428152804681645}
  , {"lat": 117.97301449390429, "lng": 24.43330264599024}
  , {"lat": 117.95704998584765, "lng": 24.439654116937504}
  , {"lat": 117.94692196460741, "lng": 24.444803958246098}
  , {"lat": 117.9465786418535, "lng": 24.45647693187891}
  , {"lat": 117.94709362598437, "lng": 24.461798434564457}
  , {"lat": 117.95018353076952, "lng": 24.47072482616602}
  , {"lat": 117.95499004932421, "lng": 24.484114413568363}
  , {"lat": 117.9568783244707, "lng": 24.49218249828516}
  , {"lat": 117.95241512866991, "lng": 24.501108889886723}
  , {"lat": 117.94451870533007, "lng": 24.50763202221094}
  , {"lat": 117.93610729785937, "lng": 24.51415515453516}
  , {"lat": 117.9297558269121, "lng": 24.52290988475977}
  , {"lat": 117.9239193400957, "lng": 24.53166461498438}
  , {"lat": 117.91344799610155, "lng": 24.534582858392582}
  , {"lat": 117.90434994312304, "lng": 24.539732699701176}
  , {"lat": 117.90331997486132, "lng": 24.550032382318363}
  , {"lat": 117.90057339283007, "lng": 24.558272128412113}
  , {"lat": 117.90503658863085, "lng": 24.567541842767582}
  , {"lat": 117.90555157276171, "lng": 24.577498202630863}
  , {"lat": 117.89302029224413, "lng": 24.58453631908594}
  , {"lat": 117.88563885303515, "lng": 24.590887790033207}
  , {"lat": 117.88718380542772, "lng": 24.59981418163477}
  , {"lat": 117.88821377368944, "lng": 24.607195620843754}
  , {"lat": 117.88804211231249, "lng": 24.61680865795313}
  , {"lat": 117.89902844043749, "lng": 24.61680865795313}
  , {"lat": 117.908126493416, "lng": 24.616465335199223}
  , {"lat": 117.91499294849413, "lng": 24.616980319330082}
  , {"lat": 117.92048611255663, "lng": 24.622645144769535}
  , {"lat": 117.92271771045702, "lng": 24.63122821361719}
  , {"lat": 117.92752422901171, "lng": 24.637408023187504}
  , {"lat": 117.9352489909746, "lng": 24.64152789623438}
  , {"lat": 117.93988384815233, "lng": 24.647192721673832}
  , {"lat": 117.94709362598437, "lng": 24.65028262645899}
  , {"lat": 117.95104183765429, "lng": 24.657835727044926}
  , {"lat": 117.95773663135546, "lng": 24.661612277337895}
  , {"lat": 117.95928158374804, "lng": 24.66847873241602}
  , {"lat": 117.96065487476366, "lng": 24.678606753656254}
  , {"lat": 117.95876659961718, "lng": 24.68598819286524}
  , {"lat": 117.9546467265703, "lng": 24.693369632074223}
  , {"lat": 117.95104183765429, "lng": 24.70092273266016}
  , {"lat": 117.95104183765429, "lng": 24.708819156000004}
  , {"lat": 117.94434704395312, "lng": 24.71414065868555}
  , {"lat": 117.94160046192187, "lng": 24.720320468255863}
  , {"lat": 117.93902554126757, "lng": 24.72941852123438}
  , {"lat": 117.93610729785937, "lng": 24.738001590082035}
  , {"lat": 117.93748058887499, "lng": 24.747442965814457}
  , {"lat": 117.94091381641405, "lng": 24.75636935741602}
  , {"lat": 117.94160046192187, "lng": 24.763750796625004}
  , {"lat": 117.94829525562304, "lng": 24.768213992425785}
  , {"lat": 117.952071805916, "lng": 24.77611041576563}
  , {"lat": 117.95550503345507, "lng": 24.783491854974613}
  , {"lat": 117.95653500171679, "lng": 24.792246585199223}
  , {"lat": 117.9572216472246, "lng": 24.80031466991602}
  , {"lat": 117.95447506519335, "lng": 24.808726077386723}
  , {"lat": 117.95327343555468, "lng": 24.816450839349613}
  , {"lat": 117.95619167896288, "lng": 24.825377230951176}
  , {"lat": 117.95584835620897, "lng": 24.83378863842188}
  , {"lat": 117.95670666309374, "lng": 24.841685061761723}
  , {"lat": 117.95499004932421, "lng": 24.847864871332035}
  , {"lat": 117.9488102397539, "lng": 24.848894839593754}
  , {"lat": 117.94142880054491, "lng": 24.84597659618555}
  , {"lat": 117.93421902271288, "lng": 24.848551516839848}
  , {"lat": 117.92992748828905, "lng": 24.85576129467188}
  , {"lat": 117.92494930835741, "lng": 24.86245608837305}
  , {"lat": 117.91859783741015, "lng": 24.866404300042973}
  , {"lat": 117.91276135059374, "lng": 24.869322543451176}
  , {"lat": 117.90761150928515, "lng": 24.873270755121098}
  , {"lat": 117.91138805957812, "lng": 24.87945056469141}
  , {"lat": 117.91482128711718, "lng": 24.88545871288477}
  , {"lat": 117.9213444194414, "lng": 24.880652194330082}
  , {"lat": 117.92769589038866, "lng": 24.876875644037113}
  , {"lat": 117.93078579517382, "lng": 24.8706958344668}
  , {"lat": 117.9378239116289, "lng": 24.872412448236332}
  , {"lat": 117.94554867359179, "lng": 24.874300723382817}
  , {"lat": 117.95396008106249, "lng": 24.872412448236332}
  , {"lat": 117.95842327686327, "lng": 24.865374331781254}
  , {"lat": 117.96219982715624, "lng": 24.85799289257227}
  , {"lat": 117.96923794361132, "lng": 24.85370135814844}
  , {"lat": 117.97747768970507, "lng": 24.855417971917973}
  , {"lat": 117.98520245166796, "lng": 24.859881167718754}
  , {"lat": 117.99241222949999, "lng": 24.862799411126957}
  , {"lat": 117.98932232471483, "lng": 24.86897922069727}
  , {"lat": 117.98777737232226, "lng": 24.876017337152348}
  , {"lat": 117.99550213428515, "lng": 24.88271213085352}
  , {"lat": 118.00528683277147, "lng": 24.879793887445317}
  , {"lat": 118.00837673755663, "lng": 24.88597369701563}
  , {"lat": 118.00168194385546, "lng": 24.889578585931645}
  , {"lat": 117.9953304729082, "lng": 24.894041781732426}
  , {"lat": 117.98743404956835, "lng": 24.897131686517582}
  , {"lat": 117.99000897022265, "lng": 24.90468478710352}
  , {"lat": 117.99773373218554, "lng": 24.901594882318363}
  , {"lat": 118.00477184864062, "lng": 24.897303347894535}
  , {"lat": 118.01112331958788, "lng": 24.898333316156254}
  , {"lat": 118.01301159473437, "lng": 24.90743136913477}
  , {"lat": 118.02262463184374, "lng": 24.90416980297266}
  , {"lat": 118.03275265308397, "lng": 24.902624850580082}
  , {"lat": 118.03755917163866, "lng": 24.895758395501957}
  , {"lat": 118.03618588062304, "lng": 24.887861972162113}
  , {"lat": 118.0425373515703, "lng": 24.881853823968754}
  , {"lat": 118.04734387012499, "lng": 24.87447238475977}
  , {"lat": 118.05472530933397, "lng": 24.870867495843754}
  , {"lat": 118.06004681201952, "lng": 24.879107241937504}
  , {"lat": 118.06777157398241, "lng": 24.871039157220707}
  , {"lat": 118.0670849284746, "lng": 24.862284426996098}
  , {"lat": 118.0751530131914, "lng": 24.86176944286524}
  , {"lat": 118.08236279102343, "lng": 24.868120913812504}
  , {"lat": 118.08957256885546, "lng": 24.874300723382817}
  , {"lat": 118.09901394458788, "lng": 24.877390628167973}
  , {"lat": 118.10879864307421, "lng": 24.880652194330082}
  , {"lat": 118.11635174366015, "lng": 24.888548617669926}
  , {"lat": 118.12562145801562, "lng": 24.89472842724024}
  , {"lat": 118.13437618824022, "lng": 24.897131686517582}
  , {"lat": 118.14501919361132, "lng": 24.896788363763676}
  , {"lat": 118.15428890796679, "lng": 24.900564914056645}
  , {"lat": 118.1656185588457, "lng": 24.90193820507227}
  , {"lat": 118.17385830493944, "lng": 24.89764667064844}
  , {"lat": 118.18450131031054, "lng": 24.89644504100977}
  , {"lat": 118.19462933155077, "lng": 24.892325167962895}
  , {"lat": 118.19874920459765, "lng": 24.884772067376957}
  , {"lat": 118.19256939502733, "lng": 24.880823855707035}
  , {"lat": 118.18930782886522, "lng": 24.874300723382817}
  , {"lat": 118.19462933155077, "lng": 24.86949420482813}
  , {"lat": 118.20080914112108, "lng": 24.866575961419926}
  , {"lat": 118.20836224170702, "lng": 24.86194110424219}
  , {"lat": 118.215743680916, "lng": 24.858164553949223}
  , {"lat": 118.2212368449785, "lng": 24.853873019525395}
  , {"lat": 118.22192349048632, "lng": 24.84700656444727}
  , {"lat": 118.22209515186327, "lng": 24.840140109369145}
  , {"lat": 118.22690167041796, "lng": 24.83447528392969}
  , {"lat": 118.23050655933397, "lng": 24.828123812982426}
  , {"lat": 118.237716337166, "lng": 24.82829547435938}
  , {"lat": 118.24149288745897, "lng": 24.833960299798832}
  , {"lat": 118.24750103565233, "lng": 24.835676913568363}
  , {"lat": 118.25144924732226, "lng": 24.832930331537113}
  , {"lat": 118.25728573413866, "lng": 24.830355410882817}
  , {"lat": 118.26346554370897, "lng": 24.83275867016016}
  , {"lat": 118.270675321541, "lng": 24.835333590814457}
  , {"lat": 118.27702679248827, "lng": 24.83705020458399}
  , {"lat": 118.28320660205858, "lng": 24.834131961175785}
  , {"lat": 118.28990139575976, "lng": 24.83327365429102}
  , {"lat": 118.2952228984453, "lng": 24.831385379144535}
  , {"lat": 118.29985775562304, "lng": 24.828638797113285}
  , {"lat": 118.29917111011522, "lng": 24.822458987542973}
  , {"lat": 118.30311932178515, "lng": 24.81782413036524}
  , {"lat": 118.30672421070116, "lng": 24.813189273187504}
  , {"lat": 118.31084408374804, "lng": 24.810614352533207}
  , {"lat": 118.3142773112871, "lng": 24.80683780224024}
  , {"lat": 118.31788220020312, "lng": 24.802889590570317}
  , {"lat": 118.32286038013476, "lng": 24.80151629955469}
  , {"lat": 118.3223453960039, "lng": 24.797224765130863}
  , {"lat": 118.32337536426562, "lng": 24.790873294183598}
  , {"lat": 118.32062878223437, "lng": 24.78658175975977}
  , {"lat": 118.32337536426562, "lng": 24.7828052094668}
  , {"lat": 118.32766689868944, "lng": 24.779715304681645}
  , {"lat": 118.33161511035937, "lng": 24.781775241205082}
  , {"lat": 118.3359066447832, "lng": 24.784521823236332}
  , {"lat": 118.34054150196093, "lng": 24.779715304681645}
  , {"lat": 118.34105648609179, "lng": 24.773192172357426}
  , {"lat": 118.3362499675371, "lng": 24.771990542718754}
  , {"lat": 118.33247341724413, "lng": 24.769930606195317}
  , {"lat": 118.33556332202929, "lng": 24.7663257172793}
  , {"lat": 118.33213009449022, "lng": 24.7608325532168}
  , {"lat": 118.3311001262285, "lng": 24.756026034662113}
  , {"lat": 118.32938351245897, "lng": 24.75310779125391}
  , {"lat": 118.32389034839647, "lng": 24.753451114007817}
  , {"lat": 118.31891216846483, "lng": 24.75259280712305}
  , {"lat": 118.31324734302538, "lng": 24.751562838861332}
  , {"lat": 118.31496395679491, "lng": 24.747442965814457}
  , {"lat": 118.31616558643358, "lng": 24.743323092767582}
  , {"lat": 118.31874050708788, "lng": 24.739031558343754}
  , {"lat": 118.32337536426562, "lng": 24.73611331493555}
  , {"lat": 118.32835354419726, "lng": 24.73491168529688}
  , {"lat": 118.33161511035937, "lng": 24.730448489496098}
  , {"lat": 118.33487667652147, "lng": 24.725985293695317}
  , {"lat": 118.33161511035937, "lng": 24.71911883861719}
  , {"lat": 118.32715191455858, "lng": 24.71517062694727}
  , {"lat": 118.3249203166582, "lng": 24.709505801507817}
  , {"lat": 118.32114376636522, "lng": 24.704527621576176}
  , {"lat": 118.31788220020312, "lng": 24.699034457513676}
  , {"lat": 118.32165875049608, "lng": 24.693369632074223}
  , {"lat": 118.32698025318163, "lng": 24.690279727289067}
  , {"lat": 118.33281673999804, "lng": 24.687361483880863}
  , {"lat": 118.33693661304491, "lng": 24.68495822460352}
  , {"lat": 118.3359066447832, "lng": 24.680838351556645}
  , {"lat": 118.33676495166796, "lng": 24.67568851024805}
  , {"lat": 118.34122814746874, "lng": 24.673800235101567}
  , {"lat": 118.34569134326952, "lng": 24.670538668939457}
  , {"lat": 118.34946789356249, "lng": 24.665560489007817}
  , {"lat": 118.3472362956621, "lng": 24.65920901806055}
  , {"lat": 118.34809460254687, "lng": 24.65302920849024}
  , {"lat": 118.3443180522539, "lng": 24.649080996820317}
  , {"lat": 118.34122814746874, "lng": 24.644446139642582}
  , {"lat": 118.34260143848437, "lng": 24.638609652826176}
  , {"lat": 118.34380306812304, "lng": 24.632086520501957}
  , {"lat": 118.34225811573046, "lng": 24.626936679193363}
  , {"lat": 118.34191479297655, "lng": 24.62075686962305}
  , {"lat": 118.3362499675371, "lng": 24.618696933099613}
  , {"lat": 118.33264507862108, "lng": 24.61354709179102}
  , {"lat": 118.33024181934374, "lng": 24.608912234613285}
  , {"lat": 118.32577862354296, "lng": 24.60479236156641}
  , {"lat": 118.3304134807207, "lng": 24.60427737743555}
  , {"lat": 118.33419003101366, "lng": 24.607195620843754}
  , {"lat": 118.33830990406054, "lng": 24.611487155267582}
  , {"lat": 118.33951153369921, "lng": 24.606852298089848}
  , {"lat": 118.33933987232226, "lng": 24.600157504388676}
  , {"lat": 118.34002651783007, "lng": 24.595694308587895}
  , {"lat": 118.3443180522539, "lng": 24.590716128656254}
  , {"lat": 118.34946789356249, "lng": 24.587969546625004}
  , {"lat": 118.35118450733202, "lng": 24.582991366693363}
  , {"lat": 118.35169949146288, "lng": 24.57560992748438}
  , {"lat": 118.35719265552538, "lng": 24.571661715814457}
  , {"lat": 118.36423077198046, "lng": 24.57080340892969}
  , {"lat": 118.37109722705858, "lng": 24.57080340892969}
  , {"lat": 118.37847866626757, "lng": 24.57080340892969}
  , {"lat": 118.38586010547655, "lng": 24.56908679516016}
  , {"lat": 118.39289822193163, "lng": 24.567026858636723}
  , {"lat": 118.39839138599413, "lng": 24.56634021312891}
  , {"lat": 118.40680279346483, "lng": 24.565996890375004}
  , {"lat": 118.41435589405077, "lng": 24.564966922113285}
  , {"lat": 118.41710247608202, "lng": 24.56136203319727}
  , {"lat": 118.42173733325976, "lng": 24.558272128412113}
  , {"lat": 118.42620052906054, "lng": 24.554495578119145}
  , {"lat": 118.43152203174608, "lng": 24.550719027826176}
  , {"lat": 118.42602886768358, "lng": 24.544710879632817}
  , {"lat": 118.41813244434374, "lng": 24.54162097484766}
  , {"lat": 118.4102360210039, "lng": 24.53887439281641}
  , {"lat": 118.4021679362871, "lng": 24.537329440423832}
  , {"lat": 118.39753307910937, "lng": 24.534754519769535}
  , {"lat": 118.38963665576952, "lng": 24.533037906000004}
  , {"lat": 118.38191189380663, "lng": 24.528231387445317}
  , {"lat": 118.37298550220507, "lng": 24.524969821283207}
  , {"lat": 118.36302914234179, "lng": 24.523253207513676}
  , {"lat": 118.3530727824785, "lng": 24.52290988475977}
  , {"lat": 118.3443180522539, "lng": 24.52411151439844}
  , {"lat": 118.33676495166796, "lng": 24.526343112298832}
  , {"lat": 118.32886852832812, "lng": 24.529089694330082}
  , {"lat": 118.32165875049608, "lng": 24.530977969476567}
  , {"lat": 118.3139339885332, "lng": 24.534067874261723}
  , {"lat": 118.30638088794726, "lng": 24.5356128266543}
  , {"lat": 118.30002941699999, "lng": 24.53063464672266}
  , {"lat": 118.29539455982226, "lng": 24.526514773675785}
  , {"lat": 118.29178967090624, "lng": 24.521021609613285}
  , {"lat": 118.28440823169726, "lng": 24.517760043451176}
  , {"lat": 118.27599682422655, "lng": 24.51690173656641}
  , {"lat": 118.26724209400194, "lng": 24.51638675243555}
  , {"lat": 118.26020397754687, "lng": 24.51192355663477}
  , {"lat": 118.25762905689257, "lng": 24.506087069818363}
  , {"lat": 118.25574078174608, "lng": 24.49990726024805}
  , {"lat": 118.24904598804491, "lng": 24.495615725824223}
  , {"lat": 118.24372448535937, "lng": 24.490809207269535}
  , {"lat": 118.23720135303515, "lng": 24.485831027337895}
  , {"lat": 118.23273815723437, "lng": 24.481367831537113}
  , {"lat": 118.22724499317187, "lng": 24.47673297435938}
  , {"lat": 118.22020687671679, "lng": 24.469351535150395}
  , {"lat": 118.21454205127733, "lng": 24.46351504833399}
  , {"lat": 118.20836224170702, "lng": 24.458536868402348}
  , {"lat": 118.2014957866289, "lng": 24.45201373607813}
  , {"lat": 118.19583096118944, "lng": 24.445833926507817}
  , {"lat": 118.19033779712694, "lng": 24.441370730707035}
  , {"lat": 118.18570293994921, "lng": 24.43604922802149}
  , {"lat": 118.18055309864062, "lng": 24.43072772533594}
  , {"lat": 118.17608990283983, "lng": 24.426951175042973}
  , {"lat": 118.1711117229082, "lng": 24.42180133373438}
  , {"lat": 118.16613354297655, "lng": 24.41699481517969}
  , {"lat": 118.160812040291, "lng": 24.413389926263676}
  , {"lat": 118.15446056934374, "lng": 24.40858340770899}
  , {"lat": 118.14862408252733, "lng": 24.404635196039067}
  , {"lat": 118.14295925708788, "lng": 24.400858645746098}
  , {"lat": 118.13626446338671, "lng": 24.39656711132227}
  , {"lat": 118.13145794483202, "lng": 24.39382052929102}
  , {"lat": 118.12510647388476, "lng": 24.391245608636723}
  , {"lat": 118.11841168018358, "lng": 24.390215640375004}

  //  { "lat": 117.88450849038034,"lng":24.590152030834137 }
  //, { "lat":117.95591962319284,"lng":24.852450614818512 }
  //, { "lat":118.18800580483346,"lng":24.901889091381012 }
  //, { "lat":118.33632123452096,"lng":24.763186698802887 }
  //, { "lat":118.43245160561471,"lng":24.553073173412262 }
  //, { "lat":118.11934125405221,"lng":24.378665214427887 }
  //, { "lat": 117.89824140053659, "lng": 24.540713554271637 }
]

/**
 * 判断地图与窗体的位置关系
 * @param {extent} map.extent 地图的范围对象
 * @returns {Boolean}
 *  不在范围内返回 0
 *  完全在范围内返回 1
 *  交叉返回 2
 *
 */
export const CheckMapPosition=function(extent) {
  //1 判断窗口的点是否在边界内 在返回1 不在继续判断
  let polygon = outline;
  let polygonFrm = [
    {"lat": extent.xmin, "lng": extent.ymin},
    {"lat": extent.xmin, "lng": extent.ymax},
    {"lat": extent.xmax, "lng": extent.ymax},
    {"lat": extent.xmax, "lng": extent.ymin}
  ]
  if (IsPointInPolygon({"lat": extent.xmin, "lng": extent.ymin}, polygon) && IsPointInPolygon({"lat": extent.xmax, "lng": extent.ymax}, polygon)) {
    return 1;
  } else {//2 判断边界点是否在窗口内 在 返回2 不在返回 0
    for (var i = 0; i < polygon.length; i++) {
      if (IsPointInPolygon(polygon[i], polygonFrm)) {
        return 2;
      }
    }
  }
  return 0;
}


/**
 * 引用百度
 * 判断点是否多边形内
 * @param {Point} point 点对象
 * @param {Polyline} polygon 多边形对象
 * @returns {Boolean} 点在多边形内返回true,否则返回false
 */
export const IsPointInPolygon=function(point, polygon) {
  //检查类型
  //        if (!(point instanceof BMap.Point) ||
  //             !(polygon instanceof BMap.Polygon)) {
  //            return false;
  //        }

  //首先判断点是否在多边形的外包矩形内，如果在，则进一步判断，否则返回false
  //        var polygonBounds = polygon.getBounds();
  //       if (!this.isPointInRect(point, polygonBounds)) {
  //           return false;
  //       }

  let pts = polygon;//.getPath(); //获取多边形点

  //基本思想是利用射线法，计算射线与多边形各边的交点，如果是偶数，则点在多边形外，否则
  //在多边形内。还会考虑一些特殊情况，如点在多边形顶点上，点在多边形边上等特殊情况。

  let N = pts.length;
  let boundOrVertex = true; //如果点位于多边形的顶点或边上，也算做点在多边形内，直接返回true
  let intersectCount = 0; //cross points count of x
  let precision = 2e-10; //浮点类型计算时候与0比较时候的容差
  let p1, p2; //neighbour bound vertices
  let p = point; //测试点

  p1 = pts[0]; //left vertex
  for (let i = 1; i <= N; ++i) {//check all rays
    //if (p.equals(p1)) {
    //    return boundOrVertex; //p is an vertex
    //}

    p2 = pts[i % N]; //right vertex
    if (p.lat < Math.min(p1.lat, p2.lat) || p.lat > Math.max(p1.lat, p2.lat)) {//ray is outside of our interests
      p1 = p2;
      continue; //next ray left point
    }
    if (p.lat > Math.min(p1.lat, p2.lat) && p.lat < Math.max(p1.lat, p2.lat)) {//ray is crossing over by the algorithm (common part of)
      if (p.lng <= Math.max(p1.lng, p2.lng)) {//x is before of ray
        if (p1.lat == p2.lat && p.lng >= Math.min(p1.lng, p2.lng)) {//overlies on a horizontal ray
          return boundOrVertex;
        }

        if (p1.lng == p2.lng) {//ray is vertical


          if (p1.lng == p.lng) {//overlies on a vertical ray
            return boundOrVertex;
          } else {//before ray
            ++intersectCount;
          }
        } else {//cross point on the left side


          let xinters = (p.lat - p1.lat) * (p2.lng - p1.lng) / (p2.lat - p1.lat) + p1.lng; //cross point of lng


          if (Math.abs(p.lng - xinters) < precision) {//overlies on a ray
            return boundOrVertex;
          }

          if (p.lng < xinters) {//before ray
            ++intersectCount;
          }
        }
      }
    } else {//special case when ray is crossing through the vertex
      if (p.lat == p2.lat && p.lng <= p2.lng) {//p crossing over p2
        let p3 = pts[(i + 1) % N]; //next vertex


        if (p.lat >= Math.min(p1.lat, p3.lat) && p.lat <= Math.max(p1.lat, p3.lat)) {//p.lat lies between p1.lat & p3.lat
          ++intersectCount;
        } else {
          intersectCount += 2;
        }
      }
    }
    p1 = p2; //next ray left point
  }

  if (intersectCount % 2 == 0) {//偶数在多边形外
    return false;
  } else { //奇数在多边形内
    return true;
  }
}

